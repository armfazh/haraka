/*
Implementation of Haraka256 and Haraka512 for ARM.
*/
#ifndef HARAKA_H_
#define HARAKA_H_

#include <arm_neon.h>

#define NUMROUNDS 5

#define u64 unsigned long
#define u128 uint8x16_t

static const uint8x16_t rc256[22] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    { 157, 123, 129, 117, 240, 254, 197, 178, 10, 192, 32, 230, 76, 112, 132, 6 },
                                    { 23, 247, 8, 47, 164, 107, 15, 100, 107, 160, 243, 136, 225, 180, 102, 139 },
                                    { 20, 145, 2, 159, 121, 79, 91, 253, 96, 157, 2, 207, 175, 188, 243, 187 },
                                    { 152, 132, 242, 83, 8, 79, 123, 46, 45, 222, 2, 52, 230, 234, 214, 14 },
                                    { 68, 112, 57, 190, 28, 205, 238, 121, 139, 68, 114, 72, 203, 176, 207, 203 },
                                    { 123, 5, 138, 43, 237, 53, 83, 141, 183, 50, 144, 110, 238, 205, 234, 126 },
                                    { 27, 239, 79, 218, 59, 11, 199, 31, 97, 39, 65, 226, 226, 253, 95, 103 },
                                    { 208, 124, 46, 94, 7, 204, 202, 175, 67, 143, 194, 103, 176, 217, 36, 41 },
                                    { 238, 101, 212, 185, 202, 143, 219, 236, 233, 127, 134, 230, 241, 99, 77, 171 },
                                    { 51, 126, 3, 173, 79, 64, 42, 91, 100, 205, 183, 212, 132, 191, 48, 28 },
                                    { 0, 152, 246, 141, 138, 45, 157, 92, 46, 139, 2, 105, 200, 158, 170, 74 },
                                    { 191, 35, 23, 148, 114, 85, 111, 222, 185, 11, 204, 178, 166, 120, 4, 250} ,
                                    { 212, 159, 18, 41, 46, 79, 250, 14, 18, 42, 119, 107, 43, 159, 180, 223 },
                                    { 238, 18, 106, 187, 174, 17, 214, 50, 54, 162, 73, 244, 68, 3, 161, 30 },
                                    { 166, 236, 168, 156, 236, 147, 229, 39, 201, 0, 150, 95, 227, 199, 162, 120 },
                                    { 132, 0, 5, 75, 79, 156, 25, 157, 136, 73, 4, 175, 216, 94, 2, 33 },
                                    { 115, 1, 212, 130, 205, 46, 40, 185, 183, 201, 89, 167, 248, 170, 58, 191 },
                                    { 107, 125, 48, 16, 217, 239, 242, 55, 23, 176, 134, 97, 13, 112, 96, 98 },
                                    { 198, 154, 252, 246, 83, 145, 194, 129, 67, 4, 48, 33, 194, 69, 202, 90 },
                                    { 58, 148, 209, 54, 232, 146, 175, 44, 187, 104, 107, 34, 60, 151, 35, 146 }};


static const uint8x16_t rc512[44] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     { 157, 123, 129, 117, 240, 254, 197, 178, 10, 192, 32, 230, 76, 112, 132, 6 },
                                     { 23, 247, 8, 47, 164, 107, 15, 100, 107, 160, 243, 136, 225, 180, 102, 139 },
                                     { 20, 145, 2, 159, 96, 157, 2, 207, 152, 132, 242, 83, 45, 222, 2, 52 },
                                     { 121, 79, 91, 253, 175, 188, 243, 187, 8, 79, 123, 46, 230, 234, 214, 14 },
                                     { 203, 176, 207, 203, 67, 143, 194, 103, 238, 205, 234, 126, 176, 217, 36, 41 },
                                     { 27, 239, 79, 218, 68, 112, 57, 190, 59, 11, 199, 31, 123, 5, 138, 43 },
                                     { 97, 39, 65, 226, 28, 205, 238, 121, 226, 253, 95, 103, 237, 53, 83, 141 },
                                     { 139, 68, 114, 72, 208, 124, 46, 94, 183, 50, 144, 110, 7, 204, 202, 175 },
                                     { 238, 101, 212, 185, 202, 143, 219, 236, 233, 127, 134, 230, 241, 99, 77, 171 },
                                     { 51, 126, 3, 173, 79, 64, 42, 91, 100, 205, 183, 212, 132, 191, 48, 28 },
                                     { 0, 152, 246, 141, 46, 139, 2, 105, 191, 35, 23, 148, 185, 11, 204, 178 },
                                     { 138, 45, 157, 92, 200, 158, 170, 74, 114, 85, 111, 222, 166, 120, 4, 250 },
                                     { 43, 159, 180, 223, 136, 73, 4, 175, 68, 3, 161, 30, 216, 94, 2, 33 },
                                     { 166, 236, 168, 156, 212, 159, 18, 41, 236, 147, 229, 39, 238, 18, 106, 187 },
                                     { 201, 0, 150, 95, 46, 79, 250, 14, 227, 199, 162, 120, 174, 17, 214, 50 },
                                     { 18, 42, 119, 107, 132, 0, 5, 75, 54, 162, 73, 244, 79, 156, 25, 157 },
                                     { 115, 1, 212, 130, 205, 46, 40, 185, 183, 201, 89, 167, 248, 170, 58, 191 },
                                     { 107, 125, 48, 16, 217, 239, 242, 55, 23, 176, 134, 97, 13, 112, 96, 98 },
                                     { 198, 154, 252, 246, 83, 145, 194, 129, 67, 4, 48, 33, 194, 69, 202, 90 },
                                     { 58, 148, 209, 54, 232, 146, 175, 44, 187, 104, 107, 34, 60, 151, 35, 146 },
                                     { 56, 146, 191, 211, 104, 98, 96, 187, 229, 60, 134, 219, 220, 211, 75, 115 },
                                     { 177, 18, 34, 203, 180, 113, 16, 229, 125, 247, 43, 199, 141, 18, 225, 36 },
                                     { 227, 141, 228, 131, 88, 185, 186, 108, 78, 26, 185, 45, 221, 253, 61, 147 },
                                     { 235, 134, 88, 34, 156, 160, 235, 255, 119, 198, 240, 174, 156, 209, 228, 226 },
                                     { 78, 146, 179, 44, 196, 21, 20, 75, 67, 27, 48, 97, 195, 71, 187, 67 },
                                     { 153, 104, 235, 22, 221, 49, 178, 3, 246, 239, 7, 231, 168, 117, 167, 219 },
                                     { 44, 71, 202, 126, 2, 35, 94, 142, 119, 89, 117, 60, 75, 97, 243, 109 },
                                     { 249, 23, 134, 184, 185, 229, 27, 109, 119, 125, 222, 214, 23, 90, 167, 205 },
                                     { 240, 67, 107, 236, 117, 12, 238, 44, 80, 105, 30, 203, 161, 165, 177, 240 },
                                     { 217, 208, 14, 96, 93, 238, 70, 169, 80, 163, 164, 99, 193, 39, 243, 59 },
                                     { 83, 3, 237, 228, 157, 6, 108, 157, 188, 186, 187, 128, 89, 17, 83, 162 },
                                     { 170, 233, 168, 107, 156, 97, 218, 0, 43, 51, 87, 249, 171, 12, 233, 150 },
                                     { 57, 202, 141, 147, 48, 222, 13, 171, 136, 41, 150, 94, 2, 177, 61, 174 },
                                     { 66, 180, 117, 46, 168, 243, 20, 136, 11, 164, 84, 213, 56, 143, 187, 23 },
                                     { 246, 22, 10, 54, 121, 183, 182, 174, 215, 127, 66, 95, 91, 138, 187, 52 },
                                     { 222, 175, 186, 255, 24, 89, 206, 67, 56, 84, 229, 203, 65, 82, 246, 38 },
                                     { 120, 201, 158, 131, 247, 156, 202, 162, 106, 2, 243, 185, 84, 154, 233, 76 },
                                     { 53, 18, 144, 34, 40, 110, 192, 64, 190, 247, 223, 27, 26, 165, 81, 174 },
                                     { 207, 89, 166, 72, 15, 188, 115, 193, 43, 210, 126, 186, 60, 97, 193, 160 },
                                     { 161, 157, 197, 233, 253, 189, 214, 74, 136, 130, 40, 2, 3, 204, 106, 117 }};

#define XOR(a, b) veorq_u8(a, b)
#define LOAD(src) vld1q_u8(src)
#define STORE(dest,src) vst1q_u8(dest,src)
#define ZIP2(a, b) (u128) vzip2q_u32((uint32x4_t)a, (uint32x4_t)b)
#define ZIP1(a, b) (u128) vzip1q_u32((uint32x4_t)a, (uint32x4_t)b)

#define AES2(s0, s1, rci) \
  s0 = vaesmcq_u8(vaeseq_u8(s0, rc256[rci])); \
  s1 = vaesmcq_u8(vaeseq_u8(s1, rc256[rci + 1])); \
  s0 = vaesmcq_u8(vaeseq_u8(s0, rc256[rci + 2])); \
  s1 = vaesmcq_u8(vaeseq_u8(s1, rc256[rci + 3]));

#define AES2_4x(s0, s1, s2, s3, rci) \
  AES2(s0[0], s0[1], rci); \
  AES2(s1[0], s1[1], rci); \
  AES2(s2[0], s2[1], rci); \
  AES2(s3[0], s3[1], rci);

#define AES2_8x(s0, s1, s2, s3, s4, s5, s6, s7, rci) \
  AES2_4x(s0, s1, s2, s3, rci); \
  AES2_4x(s4, s5, s6, s7, rci);

#define AES4(s0, s1, s2, s3, rci) \
  s0 = vaesmcq_u8(vaeseq_u8(s0, rc512[rci])); \
  s1 = vaesmcq_u8(vaeseq_u8(s1, rc512[rci + 1])); \
  s2 = vaesmcq_u8(vaeseq_u8(s2, rc512[rci + 2])); \
  s3 = vaesmcq_u8(vaeseq_u8(s3, rc512[rci + 3])); \
  s0 = vaesmcq_u8(vaeseq_u8(s0, rc512[rci + 4])); \
  s1 = vaesmcq_u8(vaeseq_u8(s1, rc512[rci + 5])); \
  s2 = vaesmcq_u8(vaeseq_u8(s2, rc512[rci + 6])); \
  s3 = vaesmcq_u8(vaeseq_u8(s3, rc512[rci + 7])); \

#define AES4_4x(s0, s1, s2, s3, rci) \
  AES4(s0[0], s0[1], s0[2], s0[3], rci); \
  AES4(s1[0], s1[1], s1[2], s1[3], rci); \
  AES4(s2[0], s2[1], s2[2], s2[3], rci); \
  AES4(s3[0], s3[1], s3[2], s3[3], rci);

#define AES4_8x(s0, s1, s2, s3, s4, s5, s6, s7, rci) \
  AES4_4x(s0, s1, s2, s3, rci); \
  AES4_4x(s4, s5, s6, s7, rci);

#define MIX2(s0, s1) \
  tmp = ZIP2(s0, s1); \
  s0 = ZIP1(s0, s1); \
  s1 = tmp;

#define MIX4(s0, s1, s2, s3) \
  tmp  = ZIP1(s0, s1); \
  s0 = ZIP2(s0, s1); \
  s1 = ZIP1(s2, s3); \
  s2 = ZIP2(s2, s3); \
  s3 = ZIP1(s0, s2); \
  s0 = ZIP2(s0, s2); \
  s2 = ZIP2(s1, tmp); \
  s1 = ZIP1(s1, tmp);

#define TRUNCSTORE(out, s0, s1, s2, s3) \
  *(u64*)(out) = (u64*)(s0)[1]; \
  *(u64*)(out + 8) = (u64*)(s1)[1]; \
  *(u64*)(out + 16) = (u64*)(s2)[0]; \
  *(u64*)(out + 24) = (u64*)(s3)[0];

void test_implementations();

void haraka256(unsigned char *out, const unsigned char *in);
void haraka256_4x(unsigned char *out, const unsigned char *in);
void haraka256_8x(unsigned char *out, const unsigned char *in);

void haraka512(unsigned char *out, const unsigned char *in);
void haraka512_4x(unsigned char *out, const unsigned char *in);
void haraka512_8x(unsigned char *out, const unsigned char *in);


#endif
